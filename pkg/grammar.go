package lexicalanalyser

// Code generated by peg -switch -inline -strict -output pkg/grammar.go pkg/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulefirst
	ruleFUNCTIONS
	ruleFUNCTION
	rulePARAMS_VARS
	ruleVAR_LIST
	ruleVAR_LIST1
	ruleTYPE
	ruleBODY
	ruleSTATEMENTS
	ruleSTATEMENT
	ruleIF_STATEMENT
	ruleWHILE_STATEMENT
	rulePRINT_STATEMENT
	ruleELSECLAUSE
	ruleRETURN_CLAUSE
	ruleVALUE
	ruleEXPR_VALUE
	ruleBOOL_EXPR_VALUE
	ruleINDEXED
	ruleINDEXABLE
	ruleBOOL_EXPRESSION
	ruleBOOL_EXPRESSION1
	ruleBOOL_OP
	ruleASSIGNMENT
	ruleFUNC_CALL
	ruleEXPRESSION
	ruleEXPRESSION1
	ruleOP
	ruleASSIGNABLE
	ruleID
	ruleFIRST_CHAR
	ruleID1
	ruleINTEGER
	ruleBOOLEAN
	ruleTEXT
	ruleSTRING
	ruleCHARS_IN_STRING
	ruleINT
	ruleARRAY
	ruleARRAY_CONTENT
	ruleARRAY_CONTENT1
	ruleMAP
	ruleKEY_VALUE_PAIRS
	ruleKEY_VALUE_PAIRS1
	ruleWHITESPACE_AT_LEAST_ONE
	ruleWHITESPACE_ANY
	ruleWHITESPACEC
	ruleAT_LEAST_ONE_SPACE
	ruleJUST_SPACES
)

var rul3s = [...]string{
	"Unknown",
	"first",
	"FUNCTIONS",
	"FUNCTION",
	"PARAMS_VARS",
	"VAR_LIST",
	"VAR_LIST1",
	"TYPE",
	"BODY",
	"STATEMENTS",
	"STATEMENT",
	"IF_STATEMENT",
	"WHILE_STATEMENT",
	"PRINT_STATEMENT",
	"ELSECLAUSE",
	"RETURN_CLAUSE",
	"VALUE",
	"EXPR_VALUE",
	"BOOL_EXPR_VALUE",
	"INDEXED",
	"INDEXABLE",
	"BOOL_EXPRESSION",
	"BOOL_EXPRESSION1",
	"BOOL_OP",
	"ASSIGNMENT",
	"FUNC_CALL",
	"EXPRESSION",
	"EXPRESSION1",
	"OP",
	"ASSIGNABLE",
	"ID",
	"FIRST_CHAR",
	"ID1",
	"INTEGER",
	"BOOLEAN",
	"TEXT",
	"STRING",
	"CHARS_IN_STRING",
	"INT",
	"ARRAY",
	"ARRAY_CONTENT",
	"ARRAY_CONTENT1",
	"MAP",
	"KEY_VALUE_PAIRS",
	"KEY_VALUE_PAIRS1",
	"WHITESPACE_AT_LEAST_ONE",
	"WHITESPACE_ANY",
	"WHITESPACEC",
	"AT_LEAST_ONE_SPACE",
	"JUST_SPACES",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type MyParser struct {
	Buffer string
	buffer []rune
	rules  [50]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *MyParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *MyParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *MyParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *MyParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *MyParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func Pretty(pretty bool) func(*MyParser) error {
	return func(p *MyParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*MyParser) error {
	return func(p *MyParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *MyParser) Init(options ...func(*MyParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 first <- <('g' 'l' 'o' 'b' 'a' 'l' 's' WHITESPACE_AT_LEAST_ONE PARAMS_VARS* ('e' 'n' 'd' 'g' 'l' 'o' 'b' 'a' 'l' 's') WHITESPACE_AT_LEAST_ONE FUNCTIONS ('m' 'a' 'i' 'n') WHITESPACE_ANY BODY ('e' 'n' 'd' 'm' 'a' 'i' 'n') WHITESPACE_ANY !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if buffer[position] != rune('g') {
					goto l0
				}
				position++
				if buffer[position] != rune('l') {
					goto l0
				}
				position++
				if buffer[position] != rune('o') {
					goto l0
				}
				position++
				if buffer[position] != rune('b') {
					goto l0
				}
				position++
				if buffer[position] != rune('a') {
					goto l0
				}
				position++
				if buffer[position] != rune('l') {
					goto l0
				}
				position++
				if buffer[position] != rune('s') {
					goto l0
				}
				position++
				if !_rules[ruleWHITESPACE_AT_LEAST_ONE]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[rulePARAMS_VARS]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if buffer[position] != rune('e') {
					goto l0
				}
				position++
				if buffer[position] != rune('n') {
					goto l0
				}
				position++
				if buffer[position] != rune('d') {
					goto l0
				}
				position++
				if buffer[position] != rune('g') {
					goto l0
				}
				position++
				if buffer[position] != rune('l') {
					goto l0
				}
				position++
				if buffer[position] != rune('o') {
					goto l0
				}
				position++
				if buffer[position] != rune('b') {
					goto l0
				}
				position++
				if buffer[position] != rune('a') {
					goto l0
				}
				position++
				if buffer[position] != rune('l') {
					goto l0
				}
				position++
				if buffer[position] != rune('s') {
					goto l0
				}
				position++
				if !_rules[ruleWHITESPACE_AT_LEAST_ONE]() {
					goto l0
				}
				{
					position4 := position
				l5:
					{
						position6, tokenIndex6 := position, tokenIndex
						{
							position7 := position
							if buffer[position] != rune('f') {
								goto l6
							}
							position++
							if buffer[position] != rune('u') {
								goto l6
							}
							position++
							if buffer[position] != rune('n') {
								goto l6
							}
							position++
							if buffer[position] != rune('c') {
								goto l6
							}
							position++
							if !_rules[ruleAT_LEAST_ONE_SPACE]() {
								goto l6
							}
							if !_rules[ruleID]() {
								goto l6
							}
							if !_rules[ruleJUST_SPACES]() {
								goto l6
							}
							if buffer[position] != rune('(') {
								goto l6
							}
							position++
							if !_rules[ruleWHITESPACE_ANY]() {
								goto l6
							}
						l8:
							{
								position9, tokenIndex9 := position, tokenIndex
								if !_rules[rulePARAMS_VARS]() {
									goto l9
								}
								goto l8
							l9:
								position, tokenIndex = position9, tokenIndex9
							}
							if buffer[position] != rune(')') {
								goto l6
							}
							position++
							if !_rules[ruleJUST_SPACES]() {
								goto l6
							}
							if buffer[position] != rune(':') {
								goto l6
							}
							position++
							if !_rules[ruleJUST_SPACES]() {
								goto l6
							}
							if !_rules[ruleTYPE]() {
								goto l6
							}
							if !_rules[ruleWHITESPACE_ANY]() {
								goto l6
							}
							if !_rules[ruleBODY]() {
								goto l6
							}
							add(ruleFUNCTION, position7)
						}
						goto l5
					l6:
						position, tokenIndex = position6, tokenIndex6
					}
					add(ruleFUNCTIONS, position4)
				}
				if buffer[position] != rune('m') {
					goto l0
				}
				position++
				if buffer[position] != rune('a') {
					goto l0
				}
				position++
				if buffer[position] != rune('i') {
					goto l0
				}
				position++
				if buffer[position] != rune('n') {
					goto l0
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l0
				}
				if !_rules[ruleBODY]() {
					goto l0
				}
				if buffer[position] != rune('e') {
					goto l0
				}
				position++
				if buffer[position] != rune('n') {
					goto l0
				}
				position++
				if buffer[position] != rune('d') {
					goto l0
				}
				position++
				if buffer[position] != rune('m') {
					goto l0
				}
				position++
				if buffer[position] != rune('a') {
					goto l0
				}
				position++
				if buffer[position] != rune('i') {
					goto l0
				}
				position++
				if buffer[position] != rune('n') {
					goto l0
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l0
				}
				{
					position10, tokenIndex10 := position, tokenIndex
					if !matchDot() {
						goto l10
					}
					goto l0
				l10:
					position, tokenIndex = position10, tokenIndex10
				}
				add(rulefirst, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 FUNCTIONS <- <FUNCTION*> */
		nil,
		/* 2 FUNCTION <- <('f' 'u' 'n' 'c' AT_LEAST_ONE_SPACE ID JUST_SPACES '(' WHITESPACE_ANY PARAMS_VARS* ')' JUST_SPACES ':' JUST_SPACES TYPE WHITESPACE_ANY BODY)> */
		nil,
		/* 3 PARAMS_VARS <- <(TYPE JUST_SPACES '[' JUST_SPACES VAR_LIST ']' WHITESPACE_ANY PARAMS_VARS* WHITESPACE_ANY)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				if !_rules[ruleTYPE]() {
					goto l13
				}
				if !_rules[ruleJUST_SPACES]() {
					goto l13
				}
				if buffer[position] != rune('[') {
					goto l13
				}
				position++
				if !_rules[ruleJUST_SPACES]() {
					goto l13
				}
				if !_rules[ruleVAR_LIST]() {
					goto l13
				}
				if buffer[position] != rune(']') {
					goto l13
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l13
				}
			l15:
				{
					position16, tokenIndex16 := position, tokenIndex
					if !_rules[rulePARAMS_VARS]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position16, tokenIndex16
				}
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l13
				}
				add(rulePARAMS_VARS, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 4 VAR_LIST <- <(ID VAR_LIST1*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[ruleID]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					if !_rules[ruleVAR_LIST1]() {
						goto l20
					}
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(ruleVAR_LIST, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 5 VAR_LIST1 <- <(JUST_SPACES ',' JUST_SPACES VAR_LIST VAR_LIST1*)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleJUST_SPACES]() {
					goto l21
				}
				if buffer[position] != rune(',') {
					goto l21
				}
				position++
				if !_rules[ruleJUST_SPACES]() {
					goto l21
				}
				if !_rules[ruleVAR_LIST]() {
					goto l21
				}
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[ruleVAR_LIST1]() {
						goto l24
					}
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleVAR_LIST1, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 6 TYPE <- <((&('v') ('v' 'o' 'i' 'd')) | (&('b') ('b' 'o' 'o' 'l')) | (&('m') ('m' 'a' 'p' '[' TYPE ']' TYPE)) | (&('[') ('[' [0-9]+ ']' TYPE)) | (&('i') ('i' 'n' 't')) | (&('s') ('s' 't' 'r' 'i' 'n' 'g')))> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					switch buffer[position] {
					case 'v':
						if buffer[position] != rune('v') {
							goto l25
						}
						position++
						if buffer[position] != rune('o') {
							goto l25
						}
						position++
						if buffer[position] != rune('i') {
							goto l25
						}
						position++
						if buffer[position] != rune('d') {
							goto l25
						}
						position++
					case 'b':
						if buffer[position] != rune('b') {
							goto l25
						}
						position++
						if buffer[position] != rune('o') {
							goto l25
						}
						position++
						if buffer[position] != rune('o') {
							goto l25
						}
						position++
						if buffer[position] != rune('l') {
							goto l25
						}
						position++
					case 'm':
						if buffer[position] != rune('m') {
							goto l25
						}
						position++
						if buffer[position] != rune('a') {
							goto l25
						}
						position++
						if buffer[position] != rune('p') {
							goto l25
						}
						position++
						if buffer[position] != rune('[') {
							goto l25
						}
						position++
						if !_rules[ruleTYPE]() {
							goto l25
						}
						if buffer[position] != rune(']') {
							goto l25
						}
						position++
						if !_rules[ruleTYPE]() {
							goto l25
						}
					case '[':
						if buffer[position] != rune('[') {
							goto l25
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l25
						}
						position++
					l28:
						{
							position29, tokenIndex29 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l29
							}
							position++
							goto l28
						l29:
							position, tokenIndex = position29, tokenIndex29
						}
						if buffer[position] != rune(']') {
							goto l25
						}
						position++
						if !_rules[ruleTYPE]() {
							goto l25
						}
					case 'i':
						if buffer[position] != rune('i') {
							goto l25
						}
						position++
						if buffer[position] != rune('n') {
							goto l25
						}
						position++
						if buffer[position] != rune('t') {
							goto l25
						}
						position++
					default:
						if buffer[position] != rune('s') {
							goto l25
						}
						position++
						if buffer[position] != rune('t') {
							goto l25
						}
						position++
						if buffer[position] != rune('r') {
							goto l25
						}
						position++
						if buffer[position] != rune('i') {
							goto l25
						}
						position++
						if buffer[position] != rune('n') {
							goto l25
						}
						position++
						if buffer[position] != rune('g') {
							goto l25
						}
						position++
					}
				}

				add(ruleTYPE, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 7 BODY <- <('{' WHITESPACE_ANY PARAMS_VARS* ';' WHITESPACE_ANY STATEMENTS* RETURN_CLAUSE? WHITESPACE_ANY '}' WHITESPACE_ANY)> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				if buffer[position] != rune('{') {
					goto l30
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l30
				}
			l32:
				{
					position33, tokenIndex33 := position, tokenIndex
					if !_rules[rulePARAMS_VARS]() {
						goto l33
					}
					goto l32
				l33:
					position, tokenIndex = position33, tokenIndex33
				}
				if buffer[position] != rune(';') {
					goto l30
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l30
				}
			l34:
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleSTATEMENTS]() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
				{
					position36, tokenIndex36 := position, tokenIndex
					{
						position38 := position
						if !_rules[ruleWHITESPACE_ANY]() {
							goto l36
						}
						if buffer[position] != rune('r') {
							goto l36
						}
						position++
						if buffer[position] != rune('e') {
							goto l36
						}
						position++
						if buffer[position] != rune('t') {
							goto l36
						}
						position++
						if buffer[position] != rune('u') {
							goto l36
						}
						position++
						if buffer[position] != rune('r') {
							goto l36
						}
						position++
						if buffer[position] != rune('n') {
							goto l36
						}
						position++
						if !_rules[ruleAT_LEAST_ONE_SPACE]() {
							goto l36
						}
						if !_rules[ruleVALUE]() {
							goto l36
						}
						add(ruleRETURN_CLAUSE, position38)
					}
					goto l37
				l36:
					position, tokenIndex = position36, tokenIndex36
				}
			l37:
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l30
				}
				if buffer[position] != rune('}') {
					goto l30
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l30
				}
				add(ruleBODY, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 8 STATEMENTS <- <(STATEMENT STATEMENTS*)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41 := position
					{
						position42, tokenIndex42 := position, tokenIndex
						{
							position44 := position
							{
								position45 := position
								{
									position46, tokenIndex46 := position, tokenIndex
									if buffer[position] != rune('a') {
										goto l47
									}
									position++
									if buffer[position] != rune('r') {
										goto l47
									}
									position++
									if buffer[position] != rune('r') {
										goto l47
									}
									position++
									if !_rules[ruleAT_LEAST_ONE_SPACE]() {
										goto l47
									}
									if !_rules[ruleID]() {
										goto l47
									}
									if buffer[position] != rune('[') {
										goto l47
									}
									position++
									if !_rules[ruleINDEXABLE]() {
										goto l47
									}
									if buffer[position] != rune(']') {
										goto l47
									}
									position++
									goto l46
								l47:
									position, tokenIndex = position46, tokenIndex46
									if !_rules[ruleID]() {
										goto l43
									}
								}
							l46:
								add(ruleASSIGNABLE, position45)
							}
							if !_rules[ruleJUST_SPACES]() {
								goto l43
							}
							if buffer[position] != rune('=') {
								goto l43
							}
							position++
							if !_rules[ruleJUST_SPACES]() {
								goto l43
							}
							if !_rules[ruleVALUE]() {
								goto l43
							}
							add(ruleASSIGNMENT, position44)
						}
						if !_rules[ruleWHITESPACE_ANY]() {
							goto l43
						}
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						{
							switch buffer[position] {
							case 'p':
								{
									position49 := position
									if buffer[position] != rune('p') {
										goto l39
									}
									position++
									if buffer[position] != rune('r') {
										goto l39
									}
									position++
									if buffer[position] != rune('i') {
										goto l39
									}
									position++
									if buffer[position] != rune('n') {
										goto l39
									}
									position++
									if buffer[position] != rune('t') {
										goto l39
									}
									position++
									if buffer[position] != rune('(') {
										goto l39
									}
									position++
									if !_rules[ruleWHITESPACE_ANY]() {
										goto l39
									}
									if !_rules[ruleVALUE]() {
										goto l39
									}
									if !_rules[ruleWHITESPACE_ANY]() {
										goto l39
									}
									if buffer[position] != rune(')') {
										goto l39
									}
									position++
									add(rulePRINT_STATEMENT, position49)
								}
								if !_rules[ruleWHITESPACE_ANY]() {
									goto l39
								}
							case 'c':
								if !_rules[ruleFUNC_CALL]() {
									goto l39
								}
								if !_rules[ruleWHITESPACE_ANY]() {
									goto l39
								}
							case 'w':
								{
									position50 := position
									if buffer[position] != rune('w') {
										goto l39
									}
									position++
									if buffer[position] != rune('h') {
										goto l39
									}
									position++
									if buffer[position] != rune('i') {
										goto l39
									}
									position++
									if buffer[position] != rune('l') {
										goto l39
									}
									position++
									if buffer[position] != rune('e') {
										goto l39
									}
									position++
									if !_rules[ruleAT_LEAST_ONE_SPACE]() {
										goto l39
									}
									if !_rules[ruleBOOL_EXPRESSION]() {
										goto l39
									}
									if !_rules[ruleAT_LEAST_ONE_SPACE]() {
										goto l39
									}
									if !_rules[ruleBODY]() {
										goto l39
									}
									if !_rules[ruleWHITESPACE_ANY]() {
										goto l39
									}
									add(ruleWHILE_STATEMENT, position50)
								}
							default:
								{
									position51 := position
									if buffer[position] != rune('i') {
										goto l39
									}
									position++
									if buffer[position] != rune('f') {
										goto l39
									}
									position++
									if !_rules[ruleAT_LEAST_ONE_SPACE]() {
										goto l39
									}
									if !_rules[ruleBOOL_EXPRESSION]() {
										goto l39
									}
									if !_rules[ruleAT_LEAST_ONE_SPACE]() {
										goto l39
									}
									if !_rules[ruleBODY]() {
										goto l39
									}
									{
										position52, tokenIndex52 := position, tokenIndex
										{
											position54 := position
											if !_rules[ruleWHITESPACE_ANY]() {
												goto l52
											}
											if buffer[position] != rune('e') {
												goto l52
											}
											position++
											if buffer[position] != rune('l') {
												goto l52
											}
											position++
											if buffer[position] != rune('s') {
												goto l52
											}
											position++
											if buffer[position] != rune('e') {
												goto l52
											}
											position++
											if !_rules[ruleWHITESPACE_ANY]() {
												goto l52
											}
											if !_rules[ruleBODY]() {
												goto l52
											}
											add(ruleELSECLAUSE, position54)
										}
										goto l53
									l52:
										position, tokenIndex = position52, tokenIndex52
									}
								l53:
									if !_rules[ruleWHITESPACE_ANY]() {
										goto l39
									}
									add(ruleIF_STATEMENT, position51)
								}
							}
						}

					}
				l42:
					add(ruleSTATEMENT, position41)
				}
			l55:
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[ruleSTATEMENTS]() {
						goto l56
					}
					goto l55
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
				add(ruleSTATEMENTS, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 9 STATEMENT <- <((ASSIGNMENT WHITESPACE_ANY) / ((&('p') (PRINT_STATEMENT WHITESPACE_ANY)) | (&('c') (FUNC_CALL WHITESPACE_ANY)) | (&('w') WHILE_STATEMENT) | (&('i') IF_STATEMENT)))> */
		nil,
		/* 10 IF_STATEMENT <- <('i' 'f' AT_LEAST_ONE_SPACE BOOL_EXPRESSION AT_LEAST_ONE_SPACE BODY ELSECLAUSE? WHITESPACE_ANY)> */
		nil,
		/* 11 WHILE_STATEMENT <- <('w' 'h' 'i' 'l' 'e' AT_LEAST_ONE_SPACE BOOL_EXPRESSION AT_LEAST_ONE_SPACE BODY WHITESPACE_ANY)> */
		nil,
		/* 12 PRINT_STATEMENT <- <('p' 'r' 'i' 'n' 't' '(' WHITESPACE_ANY VALUE WHITESPACE_ANY ')')> */
		nil,
		/* 13 ELSECLAUSE <- <(WHITESPACE_ANY ('e' 'l' 's' 'e') WHITESPACE_ANY BODY)> */
		nil,
		/* 14 RETURN_CLAUSE <- <(WHITESPACE_ANY ('r' 'e' 't' 'u' 'r' 'n') AT_LEAST_ONE_SPACE VALUE)> */
		nil,
		/* 15 VALUE <- <(('v' 'a' 'r' AT_LEAST_ONE_SPACE ID) / ('a' 'r' 'r' AT_LEAST_ONE_SPACE ID INDEXED?) / FUNC_CALL / ('v' 'o' 'i' 'd') / TEXT / INTEGER / BOOLEAN / ARRAY / EXPRESSION / MAP)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position65, tokenIndex65 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l66
					}
					position++
					if buffer[position] != rune('a') {
						goto l66
					}
					position++
					if buffer[position] != rune('r') {
						goto l66
					}
					position++
					if !_rules[ruleAT_LEAST_ONE_SPACE]() {
						goto l66
					}
					if !_rules[ruleID]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('a') {
						goto l67
					}
					position++
					if buffer[position] != rune('r') {
						goto l67
					}
					position++
					if buffer[position] != rune('r') {
						goto l67
					}
					position++
					if !_rules[ruleAT_LEAST_ONE_SPACE]() {
						goto l67
					}
					if !_rules[ruleID]() {
						goto l67
					}
					{
						position68, tokenIndex68 := position, tokenIndex
						if !_rules[ruleINDEXED]() {
							goto l68
						}
						goto l69
					l68:
						position, tokenIndex = position68, tokenIndex68
					}
				l69:
					goto l65
				l67:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleFUNC_CALL]() {
						goto l70
					}
					goto l65
				l70:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('v') {
						goto l71
					}
					position++
					if buffer[position] != rune('o') {
						goto l71
					}
					position++
					if buffer[position] != rune('i') {
						goto l71
					}
					position++
					if buffer[position] != rune('d') {
						goto l71
					}
					position++
					goto l65
				l71:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleTEXT]() {
						goto l72
					}
					goto l65
				l72:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleINTEGER]() {
						goto l73
					}
					goto l65
				l73:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleBOOLEAN]() {
						goto l74
					}
					goto l65
				l74:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleARRAY]() {
						goto l75
					}
					goto l65
				l75:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleEXPRESSION]() {
						goto l76
					}
					goto l65
				l76:
					position, tokenIndex = position65, tokenIndex65
					{
						position77 := position
						if buffer[position] != rune('(') {
							goto l63
						}
						position++
						if !_rules[ruleKEY_VALUE_PAIRS]() {
							goto l63
						}
						if buffer[position] != rune(')') {
							goto l63
						}
						position++
						add(ruleMAP, position77)
					}
				}
			l65:
				add(ruleVALUE, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 16 EXPR_VALUE <- <(('a' 'r' 'r' AT_LEAST_ONE_SPACE ID INDEXED) / FUNC_CALL / ((&('[') ARRAY) | (&('"') TEXT) | (&('-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') INTEGER) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') ID)))> */
		nil,
		/* 17 BOOL_EXPR_VALUE <- <(BOOLEAN / ('a' 'r' 'r' AT_LEAST_ONE_SPACE ID INDEXED) / ((&('"') TEXT) | (&('-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') INTEGER) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') ID)))> */
		nil,
		/* 18 INDEXED <- <('[' INDEXABLE ']')> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				if buffer[position] != rune('[') {
					goto l80
				}
				position++
				if !_rules[ruleINDEXABLE]() {
					goto l80
				}
				if buffer[position] != rune(']') {
					goto l80
				}
				position++
				add(ruleINDEXED, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 19 INDEXABLE <- <(('v' 'a' 'r' AT_LEAST_ONE_SPACE ID) / INT)> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				{
					position84, tokenIndex84 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l85
					}
					position++
					if buffer[position] != rune('a') {
						goto l85
					}
					position++
					if buffer[position] != rune('r') {
						goto l85
					}
					position++
					if !_rules[ruleAT_LEAST_ONE_SPACE]() {
						goto l85
					}
					if !_rules[ruleID]() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position84, tokenIndex84
					if !_rules[ruleINT]() {
						goto l82
					}
				}
			l84:
				add(ruleINDEXABLE, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 20 BOOL_EXPRESSION <- <(BOOL_EXPR_VALUE BOOL_EXPRESSION1*)> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				{
					position88 := position
					{
						position89, tokenIndex89 := position, tokenIndex
						if !_rules[ruleBOOLEAN]() {
							goto l90
						}
						goto l89
					l90:
						position, tokenIndex = position89, tokenIndex89
						if buffer[position] != rune('a') {
							goto l91
						}
						position++
						if buffer[position] != rune('r') {
							goto l91
						}
						position++
						if buffer[position] != rune('r') {
							goto l91
						}
						position++
						if !_rules[ruleAT_LEAST_ONE_SPACE]() {
							goto l91
						}
						if !_rules[ruleID]() {
							goto l91
						}
						if !_rules[ruleINDEXED]() {
							goto l91
						}
						goto l89
					l91:
						position, tokenIndex = position89, tokenIndex89
						{
							switch buffer[position] {
							case '"':
								if !_rules[ruleTEXT]() {
									goto l86
								}
							case '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if !_rules[ruleINTEGER]() {
									goto l86
								}
							default:
								if !_rules[ruleID]() {
									goto l86
								}
							}
						}

					}
				l89:
					add(ruleBOOL_EXPR_VALUE, position88)
				}
			l93:
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleBOOL_EXPRESSION1]() {
						goto l94
					}
					goto l93
				l94:
					position, tokenIndex = position94, tokenIndex94
				}
				add(ruleBOOL_EXPRESSION, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 21 BOOL_EXPRESSION1 <- <(JUST_SPACES BOOL_OP JUST_SPACES BOOL_EXPRESSION BOOL_EXPRESSION1*)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleJUST_SPACES]() {
					goto l95
				}
				{
					position97 := position
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune('<') {
							goto l99
						}
						position++
						if buffer[position] != rune('=') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('>') {
							goto l100
						}
						position++
						if buffer[position] != rune('=') {
							goto l100
						}
						position++
						goto l98
					l100:
						position, tokenIndex = position98, tokenIndex98
						{
							switch buffer[position] {
							case '!':
								if buffer[position] != rune('!') {
									goto l95
								}
								position++
								if buffer[position] != rune('=') {
									goto l95
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l95
								}
								position++
								if buffer[position] != rune('=') {
									goto l95
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l95
								}
								position++
							default:
								if buffer[position] != rune('<') {
									goto l95
								}
								position++
							}
						}

					}
				l98:
					add(ruleBOOL_OP, position97)
				}
				if !_rules[ruleJUST_SPACES]() {
					goto l95
				}
				if !_rules[ruleBOOL_EXPRESSION]() {
					goto l95
				}
			l102:
				{
					position103, tokenIndex103 := position, tokenIndex
					if !_rules[ruleBOOL_EXPRESSION1]() {
						goto l103
					}
					goto l102
				l103:
					position, tokenIndex = position103, tokenIndex103
				}
				add(ruleBOOL_EXPRESSION1, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 22 BOOL_OP <- <(('<' '=') / ('>' '=') / ((&('!') ('!' '=')) | (&('=') ('=' '=')) | (&('>') '>') | (&('<') '<')))> */
		nil,
		/* 23 ASSIGNMENT <- <(ASSIGNABLE JUST_SPACES '=' JUST_SPACES VALUE)> */
		nil,
		/* 24 FUNC_CALL <- <('c' 'a' 'l' 'l' JUST_SPACES ID JUST_SPACES '(' WHITESPACE_ANY VAR_LIST* ')')> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				if buffer[position] != rune('c') {
					goto l106
				}
				position++
				if buffer[position] != rune('a') {
					goto l106
				}
				position++
				if buffer[position] != rune('l') {
					goto l106
				}
				position++
				if buffer[position] != rune('l') {
					goto l106
				}
				position++
				if !_rules[ruleJUST_SPACES]() {
					goto l106
				}
				if !_rules[ruleID]() {
					goto l106
				}
				if !_rules[ruleJUST_SPACES]() {
					goto l106
				}
				if buffer[position] != rune('(') {
					goto l106
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l106
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[ruleVAR_LIST]() {
						goto l109
					}
					goto l108
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
				if buffer[position] != rune(')') {
					goto l106
				}
				position++
				add(ruleFUNC_CALL, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 25 EXPRESSION <- <(EXPR_VALUE EXPRESSION1*)> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112 := position
					{
						position113, tokenIndex113 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l114
						}
						position++
						if buffer[position] != rune('r') {
							goto l114
						}
						position++
						if buffer[position] != rune('r') {
							goto l114
						}
						position++
						if !_rules[ruleAT_LEAST_ONE_SPACE]() {
							goto l114
						}
						if !_rules[ruleID]() {
							goto l114
						}
						if !_rules[ruleINDEXED]() {
							goto l114
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleFUNC_CALL]() {
							goto l115
						}
						goto l113
					l115:
						position, tokenIndex = position113, tokenIndex113
						{
							switch buffer[position] {
							case '[':
								if !_rules[ruleARRAY]() {
									goto l110
								}
							case '"':
								if !_rules[ruleTEXT]() {
									goto l110
								}
							case '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if !_rules[ruleINTEGER]() {
									goto l110
								}
							default:
								if !_rules[ruleID]() {
									goto l110
								}
							}
						}

					}
				l113:
					add(ruleEXPR_VALUE, position112)
				}
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[ruleEXPRESSION1]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				add(ruleEXPRESSION, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 26 EXPRESSION1 <- <(JUST_SPACES OP JUST_SPACES EXPRESSION EXPRESSION1*)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if !_rules[ruleJUST_SPACES]() {
					goto l119
				}
				{
					position121 := position
					{
						switch buffer[position] {
						case '%':
							if buffer[position] != rune('%') {
								goto l119
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l119
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l119
							}
							position++
						case '-':
							if buffer[position] != rune('-') {
								goto l119
							}
							position++
						default:
							if buffer[position] != rune('+') {
								goto l119
							}
							position++
						}
					}

					add(ruleOP, position121)
				}
				if !_rules[ruleJUST_SPACES]() {
					goto l119
				}
				if !_rules[ruleEXPRESSION]() {
					goto l119
				}
			l123:
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleEXPRESSION1]() {
						goto l124
					}
					goto l123
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
				add(ruleEXPRESSION1, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 27 OP <- <((&('%') '%') | (&('/') '/') | (&('*') '*') | (&('-') '-') | (&('+') '+'))> */
		nil,
		/* 28 ASSIGNABLE <- <(('a' 'r' 'r' AT_LEAST_ONE_SPACE ID '[' INDEXABLE ']') / ID)> */
		nil,
		/* 29 ID <- <(FIRST_CHAR ID1*)> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				{
					position129 := position
					{
						switch buffer[position] {
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l127
							}
							position++
						case '_':
							if buffer[position] != rune('_') {
								goto l127
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l127
							}
							position++
						}
					}

					add(ruleFIRST_CHAR, position129)
				}
			l131:
				{
					position132, tokenIndex132 := position, tokenIndex
					{
						position133 := position
						{
							switch buffer[position] {
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l132
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l132
								}
								position++
							case '_':
								if buffer[position] != rune('_') {
									goto l132
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l132
								}
								position++
							}
						}

						add(ruleID1, position133)
					}
					goto l131
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
				add(ruleID, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 30 FIRST_CHAR <- <((&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('_') '_') | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 31 ID1 <- <((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('_') '_') | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 32 INTEGER <- <(INT / ('-' INT))> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				{
					position139, tokenIndex139 := position, tokenIndex
					if !_rules[ruleINT]() {
						goto l140
					}
					goto l139
				l140:
					position, tokenIndex = position139, tokenIndex139
					if buffer[position] != rune('-') {
						goto l137
					}
					position++
					if !_rules[ruleINT]() {
						goto l137
					}
				}
			l139:
				add(ruleINTEGER, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 33 BOOLEAN <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				{
					position143, tokenIndex143 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l144
					}
					position++
					if buffer[position] != rune('r') {
						goto l144
					}
					position++
					if buffer[position] != rune('u') {
						goto l144
					}
					position++
					if buffer[position] != rune('e') {
						goto l144
					}
					position++
					goto l143
				l144:
					position, tokenIndex = position143, tokenIndex143
					if buffer[position] != rune('f') {
						goto l141
					}
					position++
					if buffer[position] != rune('a') {
						goto l141
					}
					position++
					if buffer[position] != rune('l') {
						goto l141
					}
					position++
					if buffer[position] != rune('s') {
						goto l141
					}
					position++
					if buffer[position] != rune('e') {
						goto l141
					}
					position++
				}
			l143:
				add(ruleBOOLEAN, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 34 TEXT <- <('"' STRING '"')> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if buffer[position] != rune('"') {
					goto l145
				}
				position++
				{
					position147 := position
				l148:
					{
						position149, tokenIndex149 := position, tokenIndex
						{
							position150 := position
							{
								switch buffer[position] {
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l149
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l149
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l149
									}
									position++
								case ':':
									if buffer[position] != rune(':') {
										goto l149
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l149
									}
									position++
								case ',':
									if buffer[position] != rune(',') {
										goto l149
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l149
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l149
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l149
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l149
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l149
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l149
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l149
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l149
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l149
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l149
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l149
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l149
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l149
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l149
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l149
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l149
									}
									position++
								}
							}

							add(ruleCHARS_IN_STRING, position150)
						}
						goto l148
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
					add(ruleSTRING, position147)
				}
				if buffer[position] != rune('"') {
					goto l145
				}
				position++
				add(ruleTEXT, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 35 STRING <- <CHARS_IN_STRING*> */
		nil,
		/* 36 CHARS_IN_STRING <- <((&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('?') '?') | (&(';') ';') | (&(':') ':') | (&('.') '.') | (&(',') ',') | (&('=') '=') | (&('>') '>') | (&('<') '<') | (&('-') '-') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('!') '!') | (&(' ') ' ') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 37 INT <- <[0-9]+> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l154
				}
				position++
			l156:
				{
					position157, tokenIndex157 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l157
					}
					position++
					goto l156
				l157:
					position, tokenIndex = position157, tokenIndex157
				}
				add(ruleINT, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 38 ARRAY <- <('[' ']' TYPE '[' WHITESPACE_ANY ARRAY_CONTENT WHITESPACE_ANY ']')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('[') {
					goto l158
				}
				position++
				if buffer[position] != rune(']') {
					goto l158
				}
				position++
				if !_rules[ruleTYPE]() {
					goto l158
				}
				if buffer[position] != rune('[') {
					goto l158
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l158
				}
				{
					position160 := position
					if !_rules[ruleVALUE]() {
						goto l158
					}
				l161:
					{
						position162, tokenIndex162 := position, tokenIndex
						if !_rules[ruleARRAY_CONTENT1]() {
							goto l162
						}
						goto l161
					l162:
						position, tokenIndex = position162, tokenIndex162
					}
					add(ruleARRAY_CONTENT, position160)
				}
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l158
				}
				if buffer[position] != rune(']') {
					goto l158
				}
				position++
				add(ruleARRAY, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 39 ARRAY_CONTENT <- <(VALUE ARRAY_CONTENT1*)> */
		nil,
		/* 40 ARRAY_CONTENT1 <- <(WHITESPACE_ANY ',' WHITESPACE_ANY VALUE ARRAY_CONTENT1*)> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l164
				}
				if buffer[position] != rune(',') {
					goto l164
				}
				position++
				if !_rules[ruleWHITESPACE_ANY]() {
					goto l164
				}
				if !_rules[ruleVALUE]() {
					goto l164
				}
			l166:
				{
					position167, tokenIndex167 := position, tokenIndex
					if !_rules[ruleARRAY_CONTENT1]() {
						goto l167
					}
					goto l166
				l167:
					position, tokenIndex = position167, tokenIndex167
				}
				add(ruleARRAY_CONTENT1, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 41 MAP <- <('(' KEY_VALUE_PAIRS ')')> */
		nil,
		/* 42 KEY_VALUE_PAIRS <- <(TEXT ':' VALUE KEY_VALUE_PAIRS1*)> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if !_rules[ruleTEXT]() {
					goto l169
				}
				if buffer[position] != rune(':') {
					goto l169
				}
				position++
				if !_rules[ruleVALUE]() {
					goto l169
				}
			l171:
				{
					position172, tokenIndex172 := position, tokenIndex
					if !_rules[ruleKEY_VALUE_PAIRS1]() {
						goto l172
					}
					goto l171
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
				add(ruleKEY_VALUE_PAIRS, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 43 KEY_VALUE_PAIRS1 <- <(',' KEY_VALUE_PAIRS KEY_VALUE_PAIRS1*)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				if buffer[position] != rune(',') {
					goto l173
				}
				position++
				if !_rules[ruleKEY_VALUE_PAIRS]() {
					goto l173
				}
			l175:
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[ruleKEY_VALUE_PAIRS1]() {
						goto l176
					}
					goto l175
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				add(ruleKEY_VALUE_PAIRS1, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 44 WHITESPACE_AT_LEAST_ONE <- <WHITESPACEC+> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if !_rules[ruleWHITESPACEC]() {
					goto l177
				}
			l179:
				{
					position180, tokenIndex180 := position, tokenIndex
					if !_rules[ruleWHITESPACEC]() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
				add(ruleWHITESPACE_AT_LEAST_ONE, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 45 WHITESPACE_ANY <- <WHITESPACEC*> */
		func() bool {
			{
				position182 := position
			l183:
				{
					position184, tokenIndex184 := position, tokenIndex
					if !_rules[ruleWHITESPACEC]() {
						goto l184
					}
					goto l183
				l184:
					position, tokenIndex = position184, tokenIndex184
				}
				add(ruleWHITESPACE_ANY, position182)
			}
			return true
		},
		/* 46 WHITESPACEC <- <((&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))> */
		func() bool {
			position185, tokenIndex185 := position, tokenIndex
			{
				position186 := position
				{
					switch buffer[position] {
					case '\n':
						if buffer[position] != rune('\n') {
							goto l185
						}
						position++
					case '\t':
						if buffer[position] != rune('\t') {
							goto l185
						}
						position++
					default:
						if buffer[position] != rune(' ') {
							goto l185
						}
						position++
					}
				}

				add(ruleWHITESPACEC, position186)
			}
			return true
		l185:
			position, tokenIndex = position185, tokenIndex185
			return false
		},
		/* 47 AT_LEAST_ONE_SPACE <- <' '+> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune(' ') {
					goto l188
				}
				position++
			l190:
				{
					position191, tokenIndex191 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l191
					}
					position++
					goto l190
				l191:
					position, tokenIndex = position191, tokenIndex191
				}
				add(ruleAT_LEAST_ONE_SPACE, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 48 JUST_SPACES <- <' '*> */
		func() bool {
			{
				position193 := position
			l194:
				{
					position195, tokenIndex195 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l195
					}
					position++
					goto l194
				l195:
					position, tokenIndex = position195, tokenIndex195
				}
				add(ruleJUST_SPACES, position193)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
