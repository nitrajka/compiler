package lexicalanalyser

type MyParser Peg {
}

first <- 'globals' WHITESPACE_AT_LEAST_ONE PARAMS_VARS* 'endglobals' WHITESPACE_AT_LEAST_ONE FUNCTIONS 'main' WHITESPACE_ANY BODY 'endmain' WHITESPACE_ANY !.

FUNCTIONS <- FUNCTION*

FUNCTION <- 'func' AT_LEAST_ONE_SPACE ID JUST_SPACES '(' WHITESPACE_ANY PARAMS_VARS* ')' JUST_SPACES ':' JUST_SPACES TYPE WHITESPACE_ANY BODY

PARAMS_VARS <- TYPE JUST_SPACES '[' JUST_SPACES VAR_LIST ']' WHITESPACE_ANY PARAMS_VARS* WHITESPACE_ANY

VAR_LIST <- ID VAR_LIST1*
VAR_LIST1 <- JUST_SPACES ',' JUST_SPACES VAR_LIST VAR_LIST1*

TYPE <- 'string' / 'int' / '[' [0-9]+ ']' TYPE / 'map[' TYPE ']' TYPE / 'bool' / 'void'

BODY <- '{' WHITESPACE_ANY PARAMS_VARS* ';' WHITESPACE_ANY STATEMENTS* RETURN_CLAUSE? WHITESPACE_ANY '}' WHITESPACE_ANY

STATEMENTS <- STATEMENT STATEMENTS*

STATEMENT <- ASSIGNMENT WHITESPACE_ANY /
	IF_STATEMENT /
	WHILE_STATEMENT /
	FUNC_CALL WHITESPACE_ANY /
	PRINT_STATEMENT WHITESPACE_ANY

IF_STATEMENT <- 'if' AT_LEAST_ONE_SPACE BOOL_EXPRESSION AT_LEAST_ONE_SPACE BODY ELSECLAUSE? WHITESPACE_ANY

WHILE_STATEMENT <- 'while' AT_LEAST_ONE_SPACE BOOL_EXPRESSION AT_LEAST_ONE_SPACE BODY WHITESPACE_ANY

PRINT_STATEMENT <- 'print(' WHITESPACE_ANY VALUE WHITESPACE_ANY ')'

ELSECLAUSE <- WHITESPACE_ANY 'else' WHITESPACE_ANY BODY

RETURN_CLAUSE <- WHITESPACE_ANY 'return' AT_LEAST_ONE_SPACE VALUE

VALUE <- 'var' AT_LEAST_ONE_SPACE ID / 'arr' AT_LEAST_ONE_SPACE ID INDEXED? / FUNC_CALL / 'void' / TEXT / INTEGER / BOOLEAN / ARRAY / EXPRESSION / MAP

EXPR_VALUE <- 'arr' AT_LEAST_ONE_SPACE ID INDEXED / FUNC_CALL / TEXT / INTEGER / ARRAY / ID

BOOL_EXPR_VALUE <- BOOLEAN / 'arr' AT_LEAST_ONE_SPACE ID INDEXED / ID / INTEGER / TEXT

INDEXED <- '[' INDEXABLE ']'

INDEXABLE <- 'var' AT_LEAST_ONE_SPACE ID / INT

BOOL_EXPRESSION <- BOOL_EXPR_VALUE BOOL_EXPRESSION1*
BOOL_EXPRESSION1 <- JUST_SPACES BOOL_OP JUST_SPACES BOOL_EXPRESSION BOOL_EXPRESSION1*

BOOL_OP <- '<=' / '>=' / '<' / '>' / '==' / '!='

ASSIGNMENT <- ASSIGNABLE JUST_SPACES '=' JUST_SPACES VALUE

FUNC_CALL <- 'call' JUST_SPACES ID JUST_SPACES '(' WHITESPACE_ANY VAR_LIST* ')'

EXPRESSION <- EXPR_VALUE EXPRESSION1*
EXPRESSION1 <- JUST_SPACES OP JUST_SPACES EXPRESSION EXPRESSION1*

OP <- '+' / '-' / '*' / '/'

ASSIGNABLE <- 'arr' AT_LEAST_ONE_SPACE ID '[' INDEXABLE ']' / ID

ID <- FIRST_CHAR ID1*
FIRST_CHAR <- [a-z] / '_' / [A-Z]
ID1 <- [a-z] / '_' / [A-Z] / [0-9]

INTEGER <- INT / '-' INT
BOOLEAN <- 'true' / 'false'
TEXT <- '"' STRING '"'
STRING <- CHARS_IN_STRING*
CHARS_IN_STRING <- ' ' / '!' / '#' / '$' / '%' / '&' / '(' / ')' / '*' / '+' / '-' / ',' / '.' / ':' / ';' / '?' / [0-9] / [a-z] / [A-Z] / '-'
INT <- [0-9]+

ARRAY <- '[]' TYPE '[' WHITESPACE_ANY ARRAY_CONTENT WHITESPACE_ANY ']'

ARRAY_CONTENT <- VALUE ARRAY_CONTENT1*
ARRAY_CONTENT1 <- WHITESPACE_ANY ',' WHITESPACE_ANY VALUE ARRAY_CONTENT1*

MAP <- '(' KEY_VALUE_PAIRS ')'

KEY_VALUE_PAIRS <- TEXT ':' VALUE KEY_VALUE_PAIRS1*
KEY_VALUE_PAIRS1 <- ',' KEY_VALUE_PAIRS KEY_VALUE_PAIRS1*

WHITESPACE_AT_LEAST_ONE <- WHITESPACEC+
WHITESPACE_ANY <- WHITESPACEC*
WHITESPACEC <- ' ' / '\t' / '\n'

AT_LEAST_ONE_SPACE <- ' '+

JUST_SPACES <- ' '*